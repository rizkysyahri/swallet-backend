// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @unique @default(cuid())
  username      String
  email         String          @unique
  password      String
  profile       Profile?
  walletSetting WalletSetting[]
  Expense       Expense[]
}

model Profile {
  id     String  @id @unique @default(cuid())
  gender Gender?
  avatar String?
  userId String  @unique

  user User @relation(fields: [userId], references: [id])
}

enum Gender {
  laki
  perempuan
}

model WalletSetting {
  id                String    @id @default(cuid())
  walletName        String
  date              DateTime  @default(now())
  beginning_balance Decimal?  @db.Decimal(15, 2)
  userId            String
  expense           Expense[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  expense Expense[]
}

model Expense {
  id         String   @id @default(cuid())
  amount     Decimal  @db.Decimal(15, 2)
  date       DateTime @default(now())
  label      String
  userId     String
  walletId   String
  categoryId String

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  wallet   WalletSetting @relation(fields: [walletId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category      @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
